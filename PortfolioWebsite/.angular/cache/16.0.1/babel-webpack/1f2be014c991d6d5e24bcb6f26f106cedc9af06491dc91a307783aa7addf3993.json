{"ast":null,"code":"import * as i0 from \"@angular/core\";\nlet ColorSchemeService = /*#__PURE__*/(() => {\n  class ColorSchemeService {\n    constructor(rendererFactory) {\n      // Define prefix for clearer and more readable class names in scss files\n      this.colorSchemePrefix = 'color-scheme-';\n      // Create new renderer from renderFactory, to make it possible to use renderer2 in a service\n      this.renderer = rendererFactory.createRenderer(null, null);\n    }\n    _detectPrefersColorScheme() {\n      // Detect if prefers-color-scheme is supported\n      if (window.matchMedia('(prefers-color-scheme)').media !== 'not all') {\n        // Set colorScheme to Dark if prefers-color-scheme is dark. Otherwise, set it to Light.\n        this.colorScheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      } else {\n        // If the browser does not support prefers-color-scheme, set the default to dark.\n        this.colorScheme = 'dark';\n      }\n    }\n    _setColorScheme(scheme) {\n      this.colorScheme = scheme;\n      // Save prefers-color-scheme to localStorage\n      localStorage.setItem('prefers-color', scheme);\n    }\n    _getColorScheme() {\n      const localStorageColorScheme = localStorage.getItem('prefers-color');\n      // Check if any prefers-color-scheme is stored in localStorage\n      if (localStorageColorScheme) {\n        // Save prefers-color-scheme from localStorage\n        this.colorScheme = localStorageColorScheme;\n      } else {\n        // If no prefers-color-scheme is stored in localStorage, try to detect OS default prefers-color-scheme\n        this._detectPrefersColorScheme();\n      }\n    }\n    load() {\n      this._getColorScheme();\n      this.renderer.addClass(document.body, this.colorSchemePrefix + this.colorScheme);\n    }\n    update(scheme) {\n      this._setColorScheme(scheme);\n      // Remove the old color-scheme class\n      this.renderer.removeClass(document.body, this.colorSchemePrefix + (this.colorScheme === 'dark' ? 'light' : 'dark'));\n      // Add the new / current color-scheme class\n      this.renderer.addClass(document.body, this.colorSchemePrefix + scheme);\n    }\n    currentActive() {\n      return this.colorScheme;\n    }\n  }\n  ColorSchemeService.ɵfac = function ColorSchemeService_Factory(t) {\n    return new (t || ColorSchemeService)(i0.ɵɵinject(i0.RendererFactory2));\n  };\n  ColorSchemeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ColorSchemeService,\n    factory: ColorSchemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ColorSchemeService;\n})();\nexport { ColorSchemeService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}